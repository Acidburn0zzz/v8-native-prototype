// Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "test/unittests/test-utils.h"
#include "src/wasm/wasm-macro-gen.h"

namespace v8 {
namespace internal {
namespace wasm {

class MacroGenTest : public TestWithZone {};

#define EXPECT_SIZE(size, ...)     \
  do {                             \
    byte code[] = {__VA_ARGS__};   \
    EXPECT_EQ(size, sizeof(code)); \
  } while (false)


TEST_F(MacroGenTest, Constants) {
  EXPECT_SIZE(2, WASM_ONE);
  EXPECT_SIZE(2, WASM_ZERO);

  EXPECT_SIZE(2, WASM_INT8(122));
  EXPECT_SIZE(2, WASM_INT8(254));

  EXPECT_SIZE(5, WASM_INT32(1));
  EXPECT_SIZE(5, WASM_INT32(10000));
  EXPECT_SIZE(5, WASM_INT32(-9828934));

  EXPECT_SIZE(5, WASM_FLOAT32(1.0f));
  EXPECT_SIZE(5, WASM_FLOAT32(10000.0f));
  EXPECT_SIZE(5, WASM_FLOAT32(-9828934.0f));

  EXPECT_SIZE(9, WASM_FLOAT64(1.5));
  EXPECT_SIZE(9, WASM_FLOAT64(10200.0));
  EXPECT_SIZE(9, WASM_FLOAT64(-9818934.0));
}


TEST_F(MacroGenTest, Statements) {
  EXPECT_SIZE(4, WASM_SET_LOCAL(0, WASM_ZERO));

  EXPECT_SIZE(4, WASM_SET_GLOBAL(0, WASM_ZERO));

  EXPECT_SIZE(6, WASM_SET_HEAP(kAstInt32, WASM_ZERO, WASM_ZERO));

  EXPECT_SIZE(4, WASM_IF(WASM_ZERO, WASM_NOP));

  EXPECT_SIZE(5, WASM_IF_THEN(WASM_ZERO, WASM_NOP, WASM_NOP));

  EXPECT_SIZE(1, WASM_NOP);

  EXPECT_SIZE(3, WASM_BLOCK(1, WASM_NOP));
  EXPECT_SIZE(4, WASM_BLOCK(2, WASM_NOP, WASM_NOP));
  EXPECT_SIZE(5, WASM_BLOCK(3, WASM_NOP, WASM_NOP, WASM_NOP));

  EXPECT_SIZE(3, WASM_LOOP(1, WASM_NOP));
  EXPECT_SIZE(4, WASM_LOOP(2, WASM_NOP, WASM_NOP));
  EXPECT_SIZE(5, WASM_LOOP(3, WASM_NOP, WASM_NOP, WASM_NOP));
  EXPECT_SIZE(4, WASM_LOOP(1, WASM_BREAK(0)));
  EXPECT_SIZE(4, WASM_LOOP(1, WASM_CONTINUE(0)));

  EXPECT_SIZE(3, WASM_RETURN(WASM_ZERO));
  EXPECT_SIZE(5, WASM_RETURN(WASM_ZERO, WASM_ONE));
  EXPECT_SIZE(7, WASM_RETURN(WASM_ZERO, WASM_ONE, WASM_ZERO));

  EXPECT_SIZE(4, WASM_SWITCH(0, WASM_ZERO));
  EXPECT_SIZE(5, WASM_SWITCH(1, WASM_ZERO, WASM_NOP));
  EXPECT_SIZE(6, WASM_SWITCH(2, WASM_ZERO, WASM_NOP, WASM_NOP));

  EXPECT_SIZE(4, WASM_SWITCH_NF(0, WASM_ZERO));
  EXPECT_SIZE(5, WASM_SWITCH_NF(1, WASM_ZERO, WASM_NOP));
  EXPECT_SIZE(6, WASM_SWITCH_NF(2, WASM_ZERO, WASM_NOP, WASM_NOP));
}


TEST_F(MacroGenTest, MacroStatements) {
  EXPECT_SIZE(9, WASM_WHILE(WASM_INT8(0), WASM_NOP));
}


TEST_F(MacroGenTest, Expressions) {
  EXPECT_SIZE(2, WASM_GET_LOCAL(0));
  EXPECT_SIZE(2, WASM_GET_LOCAL(1));
  EXPECT_SIZE(2, WASM_GET_LOCAL(12));
  EXPECT_SIZE(2, WASM_GET_GLOBAL(0));
  EXPECT_SIZE(2, WASM_GET_GLOBAL(1));
  EXPECT_SIZE(2, WASM_GET_GLOBAL(12));
  EXPECT_SIZE(4, WASM_GET_HEAP(kAstInt32, WASM_ZERO));
  EXPECT_SIZE(4, WASM_GET_HEAP(kAstFloat64, WASM_ZERO));
  EXPECT_SIZE(4, WASM_GET_HEAP(kAstFloat32, WASM_ZERO));

  EXPECT_SIZE(7, WASM_TERNARY(WASM_ZERO, WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_COMMA(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(3, WASM_NOT(WASM_ZERO));
}


TEST_F(MacroGenTest, FunctionCalls) {
  EXPECT_SIZE(2, WASM_CALL_FUNCTION0(0));
  EXPECT_SIZE(2, WASM_CALL_FUNCTION0(1));
  EXPECT_SIZE(2, WASM_CALL_FUNCTION0(11));

  EXPECT_SIZE(4, WASM_CALL_FUNCTION(0, WASM_ZERO));
  EXPECT_SIZE(6, WASM_CALL_FUNCTION(1, WASM_ZERO, WASM_ZERO));

  EXPECT_SIZE(4, WASM_CALL_INDIRECT0(0, WASM_ZERO));
  EXPECT_SIZE(4, WASM_CALL_INDIRECT0(1, WASM_ZERO));
  EXPECT_SIZE(4, WASM_CALL_INDIRECT0(11, WASM_ZERO));

  EXPECT_SIZE(6, WASM_CALL_INDIRECT(0, WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(8, WASM_CALL_INDIRECT(1, WASM_ZERO, WASM_ZERO, WASM_ZERO));
}


TEST_F(MacroGenTest, Int32Binop) {
  EXPECT_SIZE(5, WASM_INT32_ADD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SUB(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_MUL(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SDIV(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_UDIV(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SMOD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_UMOD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_AND(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_IOR(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_XOR(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SHL(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SHR(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SAR(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_EQ(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SLT(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_SLE(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_ULT(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_INT32_ULE(WASM_ZERO, WASM_ZERO));
}


TEST_F(MacroGenTest, Float64Binop) {
  EXPECT_SIZE(5, WASM_FLOAT64_ADD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_SUB(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_MUL(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_DIV(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_MOD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_EQ(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_LT(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT64_LE(WASM_ZERO, WASM_ZERO));
}


TEST_F(MacroGenTest, Float32Binop) {
  EXPECT_SIZE(5, WASM_FLOAT32_ADD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_SUB(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_MUL(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_DIV(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_MOD(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_EQ(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_LT(WASM_ZERO, WASM_ZERO));
  EXPECT_SIZE(5, WASM_FLOAT32_LE(WASM_ZERO, WASM_ZERO));
}


TEST_F(MacroGenTest, Conversions) {}
}
}
}
